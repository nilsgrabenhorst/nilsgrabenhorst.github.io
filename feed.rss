<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>saiboi</title><description>A blog about software engineering in the Swift world</description><link>https://saiboi.com</link><language>en</language><lastBuildDate>Wed, 26 Mar 2025 17:16:02 +0100</lastBuildDate><pubDate>Wed, 26 Mar 2025 17:16:02 +0100</pubDate><ttl>250</ttl><atom:link href="https://saiboi.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://saiboi.com/blog/Labels%20in%20Switch%20Patterns</guid><title>Labels for Switch Patterns</title><description>How to make switching over multiple values more readable.</description><link>https://saiboi.com/blog/Labels%20in%20Switch%20Patterns</link><pubDate>Fri, 7 Mar 2025 16:40:00 +0100</pubDate><content:encoded><![CDATA[<h1>Labels for Switch Patterns</h1><p>We frequently come across scenarios where we need to check multiple values before executing conditional code. These can lead to nested <code>if</code> statements, which are potentially hard to read and maintain. <code>switch</code> statements are a great alternative with multiple advantages: The compiler performs exhaustiveness checking, and powerful pattern matching is more natural than using the rather weird <code>if case</code> syntax. Additionally, a <code>switch</code> statement can be more efficient than chaining multiple conditionals, as the value to be switched over is read once only, unlike once <em>for each</em> <code>if</code> condition check.</p><p>It is important to remember that the switch is evaluated in sequential order until a match is found. By strategically ordering the most specific cases at the top, and the more general catch-all cases at the bottom, we can implement some powerful logic in a simple and concise manner. In the following example, we add the most general case where the <code>isAdmin</code> condition is irrelevant at the bottom:</p><pre><code><span class="keyword">switch</span> (isLoggedIn, isAdmin) {
<span class="keyword">case</span> (<span class="keyword">true</span>, <span class="keyword">true</span>):
    <span class="comment">// ...</span>
    
<span class="keyword">case</span> (<span class="keyword">true</span>, <span class="keyword">false</span>):
    <span class="comment">// ...</span>
    
<span class="keyword">case</span> (<span class="keyword">false</span>, <span class="keyword">_</span>):
    <span class="comment">// For logged-out users, we don't care whether they are an admin.</span>
}
</code></pre><p>Great, this works! But let's face it, it's hard to read. Of course, we can figure out what "<code>case (true, false):</code>" in the above example means, but we have to cross-reference the tuple at the top of the <code>switch</code> statement.</p><p>Let's refactor to improve readability. A very powerful tool is to use bespoke <em>types</em> in place of nondescript <code>true</code>/<code>false</code> boolean values. Here is our example rewritten with two <code>enum</code> types specific for each use case:</p><pre><code><span class="keyword">enum</span> SessionState {
  <span class="keyword">case</span> loggedIn, loggedOut
}

<span class="keyword">enum</span> Role {
  <span class="keyword">case</span> admin, user
}

<span class="comment">// elsewhere:</span>

<span class="keyword">switch</span> (sessionState, role) {
<span class="keyword">case</span> (.<span class="dotAccess">loggedIn</span>, .<span class="dotAccess">admin</span>):
    <span class="comment">// do admin stuff</span>

<span class="keyword">case</span> (.<span class="dotAccess">loggedIn</span>, <span class="keyword">_</span>):
    <span class="comment">// do non-admin stuff</span>

<span class="keyword">case</span> (.<span class="dotAccess">loggedOut</span>, <span class="keyword">_</span>):
    <span class="comment">// ask user to log in</span>
</code></pre><p>Nice! Now our code is locally glanceable. Of course, it may be a bit overkill to do this everywhere. Before we look at a more lightweight approach, it's important to consider additional benefits of custom types. When using a boolean <code>isAdmin</code> value, we could later accidentally replace it with some unrelated boolean value, such as <code>isGuestUser</code>. The compiler is happy with this change, and suddenly all guest users are allowed to perform Admin tasks. Oops! With a bespoke <code>Role</code> type, we get compiler errors preventing this bug. Additionally, a boolean value always has exactly two states, which makes it harder to introduce a new role for guest users. But it's easy with our <code>Role</code> type: we just add a new <code>.guest</code> case.</p><p>However, it may be overkill to define custom types if we only use them for a single switch. A more lightweight approach is to use <strong>labels</strong> instead. Let's see how they can provide similar readability benefits:</p><pre><code><span class="keyword">switch</span> (loggedIn: isLoggedIn, isAdmin: isAdmin) {
<span class="keyword">case</span> (loggedIn: <span class="keyword">true</span>, isAdmin: <span class="keyword">true</span>):
    <span class="comment">// do admin stuff</span>
    
<span class="keyword">case</span> (loggedIn: <span class="keyword">true</span>, isAdmin: <span class="keyword">false</span>):
    <span class="comment">// do non-admin stuff</span>
    
<span class="keyword">case</span> (loggedIn: <span class="keyword">false</span>, <span class="keyword">_</span>):
    <span class="comment">// ask user to log in</span>
}
</code></pre><p>Notice how we don't have to write the label for the catch-all underscore pattern in the third <code>case</code>. Of course, we can mix and match the two approaches as needed. In this example, I would probably prefer a custom <code>Role</code> type, and use a label for a boolean <code>loggedIn</code> state.</p>]]></content:encoded></item></channel></rss>