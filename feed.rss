<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>saiboi</title><description>A blog about Swift, SwiftUI, and other amusing things</description><link>https://saiboi.com</link><language>en</language><lastBuildDate>Sat, 8 Feb 2025 13:06:18 +0100</lastBuildDate><pubDate>Sat, 8 Feb 2025 13:06:18 +0100</pubDate><ttl>250</ttl><atom:link href="https://saiboi.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://saiboi.com/blog/Labels%20in%20Switch%20Patterns</guid><title>Labels for Switch Patterns</title><description>How to make switching over multiple values more readable.</description><link>https://saiboi.com/blog/Labels%20in%20Switch%20Patterns</link><pubDate>Sun, 3 Nov 2024 16:40:00 +0100</pubDate><content:encoded><![CDATA[<h1>Labels for Switch Patterns</h1><p>Sometimes we need to check multiple values before running code conditionally. We could end up with nested <code>if</code> statements, or we may opt for a <code>switch</code> statement which has a few advantages. The compiler performs exhaustiveness checking. Powerful pattern matching is more straight-forward when compared to the unusual <code>if case </code> syntax. And a <code>switch</code> statement can be more efficient than multiple conditionals because the value to be pattern-matched needs to be read only once for the <code>switch</code>, as opposed to once for each <code>if</code> condition check.</p><p>The cases of a switch are evaluated top-to-bottom until a match is found. By ordering the most specific ones at the top, and the more general catch-all cases at the bottom, we can implement some powerful logic in a simple and concise manner.</p><pre><code><span class="keyword">switch</span> (isLoggedIn, isAdmin) {
<span class="keyword">case</span> (<span class="keyword">true</span>, <span class="keyword">true</span>):
    <span class="comment">// ...</span>
    
<span class="keyword">case</span> (<span class="keyword">true</span>, <span class="keyword">false</span>):
    <span class="comment">// ...</span>
    
<span class="keyword">case</span> (<span class="keyword">false</span>, <span class="keyword">_</span>):
    <span class="comment">// For logged-out users we don't care whether they are an admin.</span>
}
</code></pre><p>Quick question: what does "<code>case (true, false):</code>" mean? We should always try to write code that is easy to understand. And let's face it, these <code>case</code>s here are a failure in terms of readability. We have to cross-reference the tuple at the top of the <code>switch</code> to understand the matched patterns below.</p><p>Sometimes we can mitigate this problem by using types where the patterns become self-explanatory. For <code>isAdmin</code>, we could define a "<code>Role</code>" <code>enum</code> type with expressive <code>.admin</code> and <code>.user</code> case names instead of the rather anonymous <code>true</code>/<code>false</code> boolean value:</p><pre><code><span class="keyword">enum</span> SessionState {
  <span class="keyword">case</span> loggedIn, loggedOut
}

<span class="keyword">enum</span> Role {
  <span class="keyword">case</span> admin, user
}

<span class="comment">// elsewhere:</span>

<span class="keyword">switch</span> (sessionState, role) {
<span class="keyword">case</span> (.<span class="dotAccess">loggedIn</span>, .<span class="dotAccess">admin</span>):
    <span class="comment">// do admin stuff</span>

<span class="keyword">case</span> (.<span class="dotAccess">loggedIn</span>, <span class="keyword">_</span>):
    <span class="comment">// do non-admin stuff</span>

<span class="keyword">case</span> (.<span class="dotAccess">loggedOut</span>, <span class="keyword">_</span>):
    <span class="comment">// ask user to log in</span>
</code></pre><p>Defining a specific type tailored to the use case has a lot of merits. With a <code>Role</code> type, the compiler prevents us from accidentally checking some unrelated boolean property. Also, booleans never have more than two statesâ€”what if we want to introduce a new <code>.guest</code> role later?</p><p>However, it may be overkill to define bespoke types for a single switch. Instead, we can use <strong>labels</strong> to improve readability locally:</p><pre><code><span class="keyword">switch</span> (loggedIn: isLoggedIn, isAdmin: isAdmin) {
<span class="keyword">case</span> (loggedIn: <span class="keyword">true</span>, isAdmin: <span class="keyword">true</span>):
    <span class="comment">// do admin stuff</span>
    
<span class="keyword">case</span> (loggedIn: <span class="keyword">true</span>, isAdmin: <span class="keyword">false</span>):
    <span class="comment">// do non-admin stuff</span>
    
<span class="keyword">case</span> (loggedIn: <span class="keyword">false</span>, <span class="keyword">_</span>):
    <span class="comment">// ask user to log in</span>
}
</code></pre><p>Note how we do not have to write the label for the catch-all underscore pattern in the third <code>case</code>. Of course we can mix and match as needed. In this example I would probably prefer a custom <code>enum Role</code> type, but use a label for the boolean <code>loggedIn</code> state.</p>]]></content:encoded></item></channel></rss>